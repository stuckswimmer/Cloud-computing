import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TabPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;

import java.io.File;
import java.lang.reflect.Field;
import java.text.ParseException;
import java.util.HashMap;

public class MapReduceInterface extends Application{
	private String helpString = "Select folder containing BOTH " +
            "'Top30_airports_LatLong.csv' & 'AComp_Passenger_data.csv'";
    @Override
    public void start(Stage primaryStage) throws Exception {

        try {
            Class<?> macFontFinderClass = Class.forName("com.sun.t2k.MacFontFinder");
            Field psNameToPathMap = macFontFinderClass.getDeclaredField("psNameToPathMap");
            psNameToPathMap.setAccessible(true);
            psNameToPathMap.set(null, new HashMap<String, String>());
        } catch (Exception e) {

        }
        primaryStage.setTitle("MapReduce Prototype");
        
        TabPane tabPane = new TabPane();
        
        Tab tab1 = new Tab("Objective 1", new Label("Objective 1"));
        Tab tab2 = new Tab("Objective 2"  , new Label("Obejctive 2"));
        Tab tab3 = new Tab("Objective 3" , new Label("Objective 3"));
        Tab tab4 = new Tab("Objective 4" , new Label("Objective 4"));

        tabPane.getTabs().add(tab1);
        tabPane.getTabs().add(tab2);
        tabPane.getTabs().add(tab3);
        tabPane.getTabs().add(tab4);


        // ------ Objective boxes ---------

        VBox objectiveBoxes = new VBox();
        Label help = new Label(helpString);
        help.setWrapText(true);

        Label obj1Label = new Label("Number of flights:");
        final TextArea obj1 = new TextArea();

        Label obj2Label = new Label("Flight details:");
        final TextArea obj2 = new TextArea();

        Label obj3Label = new Label("Number of Passengers:");
        final TextArea obj3 = new TextArea();
        
        Label obj4Label = new Label("Distance Covered for each flight in Nautical Miles:");
        final TextArea obj4 = new TextArea();

        final Label outputPathLabel = new Label("File Output");
        Label outputDesc = new Label("Output Directory:");
        final TextField outputPath = new TextField();
        HBox fileButtons = new HBox();
        Button makeTxt = new Button("Create Txts");
        makeTxt.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                String dirName = outputPath.getText();
                StaticClass.makeTxtFile(dirName+"Objective1.txt",StaticClass.objective1TextString);
                StaticClass.makeTxtFile(dirName+"Objective2.txt",StaticClass.objective2TextString);
                StaticClass.makeTxtFile(dirName+"Objective3.txt",StaticClass.objective3TextString);
                StaticClass.makeTxtFile(dirName+"Objective4.txt",StaticClass.objective4TextString);
            }
        });
        Button makeCSV = new Button("Create CSVs");
        makeCSV.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                String dirName = outputPath.getText();
                StaticClass.createCSV(dirName+"Objective1.csv",StaticClass.objective1CSVString);
                StaticClass.createCSV(dirName+"Objective2.csv",StaticClass.objective2CSVString);
                StaticClass.createCSV(dirName+"Objective3.csv",StaticClass.objective3CSVString);
                StaticClass.createCSV(dirName+"Objective4.csv",StaticClass.objective4CSVString);
            }
        });
        final DirectoryChooser outputFolder = new DirectoryChooser();
        outputFolder.setTitle("Choose output directory");
        Button fileOutputButton = new Button("Select Folder");
        fileOutputButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                File file = outputFolder.showDialog(primaryStage);
                if (file != null) {
                    outputPath.setText(file.getAbsolutePath()+"/");
                }
            }
        });
        fileButtons.getChildren().addAll(makeTxt,makeCSV);
        objectiveBoxes.getChildren().addAll(help,obj1Label,obj1,obj2Label,obj2,obj3Label,obj3,obj4Label,obj4,outputPathLabel,outputDesc,fileOutputButton,outputPath,fileButtons);
        //-------------------------------
        HBox hBox = new HBox();

        hBox.setSpacing(6);
        // hbox.setStyle("-fx-background-color: #336699;");

        Label label = new Label("Input Directory:");
        final TextField path = new TextField ();
        Button run = new Button("Run MapReduce");
        run.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                // window.hide();
                String dirName = path.getText();
                if(!dirName.isEmpty() && dirName.charAt(dirName.length()-1) == '/'){
                    Main.getPassengerData(dirName);
                    Main.getAirportData(dirName);
                    StaticClass.getAirportHashMap(Main.airportLines);
                    try {
                        String reduced1 = Main.runObjective1();
                        String reduced2 = Main.runObjective2();
                        String reduced3 = Main.runObjective3();
                        String reduced4 = Main.runObjective4();
                        obj1.setText(reduced1);
                        obj2.setText(reduced2);
                        obj3.setText(reduced3);
                        obj4.setText(reduced4);

                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                }

            }
        });

        final DirectoryChooser inputFolder = new DirectoryChooser();
        inputFolder.setTitle("Choose input directory");
        Button fileInputButton = new Button("Select Folder");
        fileInputButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                File file = inputFolder.showDialog(primaryStage);
                if (file != null) {
                    path.setText(file.getAbsolutePath()+"/");
                    System.out.println(file.getAbsolutePath());
                    //   openFile(file);
                }
            }
        });
        hBox.getChildren().addAll(label, path,fileInputButton,run);


        HBox root = new HBox(10d);
        BorderPane border = new BorderPane();
        new VBox(6);
        border.setTop(hBox);
        border.setCenter(objectiveBoxes);
        root.getChildren().add(border);
        primaryStage.setScene(new Scene(root,700,800));
        primaryStage.show();

    }


    public static void main(String[] args){
        launch();
    }




}
